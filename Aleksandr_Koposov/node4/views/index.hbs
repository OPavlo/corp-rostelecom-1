<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
    <script src="https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/@mdi/font@5.x/css/materialdesignicons.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css" rel="stylesheet">
    <title>TODO List</title>
    <style>
        [v-cloak] {
            display: none;
        }
    </style>
</head>

<body>
    <div id="app" v-cloak>
        <v-app>
            <v-main app>
                <v-container>
                    <v-row align="center" justify="center">
                        <v-col cols="8">
                            <h1 class="text-h3 text-center mt-8 mb-4">Список дел
                            </h1>
                            <div class="text-right">
                                <v-btn @click="calendarDialog = true" x-small text color="primary">
                                    <v-icon small>mdi-calendar</v-icon>Открыть календарь
                                </v-btn>
                            </div>
                            <v-card>
                                <v-card-title>
                                    <h3 class="text-h5"><span v-text="!!editedTask.id ? 'Изменить' : 'Добавить'"></span>
                                        задачу</h3>
                                    <v-spacer></v-spacer>
                                    <v-btn icon text @click="showAdditionalTaskParams = !showAdditionalTaskParams">
                                        <v-icon id="expandNewTask"
                                            v-text="showAdditionalTaskParams ? 'mdi-arrow-up' : 'mdi-arrow-down'">
                                        </v-icon>
                                    </v-btn>
                                </v-card-title>
                                <v-card-text>
                                    <v-text-field v-model="editedTask.name" label="Задача" filled dense clearable
                                        hide-details>
                                    </v-text-field>
                                    <v-slide-y-transition>
                                        <div v-if="showAdditionalTaskParams">
                                            <v-textarea v-model="editedTask.desc" label="Описание задачи" filled dense
                                                hide-details clearable>
                                            </v-textarea>
                                            <v-row align="center" justify="center">
                                                <v-col cols="6" class="py-0">
                                                    <v-dialog ref="dialogDate" v-model="editedTask.planned.dialogDate"
                                                        click-on-content="false"
                                                        :return-value.sync="editedTask.planned.date" persistent
                                                        width="290px">
                                                        <template #activator="{ on, attrs }">
                                                            <v-text-field v-model="editedTask.planned.date"
                                                                label="Запланировать на дату"
                                                                prepend-icon="mdi-calendar" readonly filled hide-details
                                                                v-bind="attrs" v-on="on">
                                                            </v-text-field>
                                                        </template>
                                                        <v-date-picker v-model="editedTask.planned.date" scrollable flat
                                                            locale="ru-ru">
                                                            <v-spacer></v-spacer>
                                                            <v-btn text color="primary"
                                                                @click="editedTask.planned.dialogDate = false">
                                                                Отмена</v-btn>
                                                            <v-btn text color="primary"
                                                                @click="$refs.dialogDate.save(editedTask.planned.date)">
                                                                Ок</v-btn>
                                                        </v-date-picker>
                                                    </v-dialog>
                                                </v-col>
                                                <v-col cols="4" class="py-0">
                                                    <v-dialog ref="dialogTime" v-model="editedTask.planned.dialogTime"
                                                        :return-value.sync="editedTask.planned.time"
                                                        click-on-content="false" persistent width="290px">
                                                        <template v-slot:activator="{ on, attrs }">
                                                            <v-text-field v-model="editedTask.planned.time"
                                                                label="и время" prepend-icon="mdi-timer" filled readonly
                                                                hide-details v-bind="attrs" v-on="on"></v-text-field>
                                                        </template>
                                                        <v-time-picker v-if="editedTask.planned.dialogTime"
                                                            v-model="editedTask.planned.time" full-width locale="ru-ru"
                                                            format="24hr">
                                                            <v-spacer></v-spacer>
                                                            <v-btn text color="primary"
                                                                @click="editedTask.planned.dialogTime = false">Отмена
                                                            </v-btn>
                                                            <v-btn text color="primary"
                                                                @click="$refs.dialogTime.save(editedTask.planned.time)">
                                                                Oк
                                                            </v-btn>
                                                        </v-time-picker>
                                                    </v-dialog>
                                                </v-col>
                                                <v-col cols="2" class="py-0">
                                                    <v-btn icon text small @click="clearPlanned">
                                                        <v-icon>mdi-close</v-icon>
                                                    </v-btn>
                                                </v-col>
                                            </v-row>
                                            <v-switch v-model="editedTask.important" color="error" label="Важное!">
                                            </v-switch>
                                        </div>
                                    </v-slide-y-transition>
                                </v-card-text>
                                <v-card-actions>
                                    <v-fade-transition>
                                        <v-btn v-if="editedTask.id === 0" @click="add" text color="success">
                                            <v-icon left>mdi-plus</v-icon>Добавить
                                        </v-btn>
                                        <v-btn v-else @click="update" text color="orange">
                                            <v-icon left>mdi-content-save</v-icon>Изменить
                                        </v-btn>
                                    </v-fade-transition>
                                    <v-spacer></v-spacer>
                                    <v-btn @click="clear" text>
                                        <v-icon left>mdi-refresh</v-icon>
                                        <v-fade-transition>
                                            <span v-if="editedTask.id === 0">Очистить</span>
                                            <span v-else>Отменить</span>
                                        </v-fade-transition>
                                    </v-btn>
                                </v-card-actions>
                            </v-card>
                            <v-list two-line avatar subheader>
                                <template v-for="(item, index) in items || []">
                                    <v-subheader v-if="item.header" :key="index" class="pt-6" v-text="item.header">
                                    </v-subheader>
                                    <v-divider v-else-if="item.divider" :key="index"></v-divider>
                                    <v-list-item v-else :key="index" :class="item.important ? 'yellow lighten-4' : ''"
                                        @click="">
                                        <v-list-item-avatar @click="doneItem(item)">
                                            <v-slide-x-transition>
                                                <v-icon v-if="item.done" class="success--text">
                                                    mdi-checkbox-marked-circle-outline</v-icon>
                                                <v-icon v-else>mdi-checkbox-blank-circle-outline</v-icon>
                                            </v-slide-x-transition>
                                        </v-list-item-avatar>

                                        <v-list-item-content
                                            :class="item.done ? 'success--text text-decoration-line-through' : ''">
                                            <v-list-item-title v-text="item.name"></v-list-item-title>
                                            <v-tooltip bottom max-width="300">
                                                <template #activator="{ attrs, on }">
                                                    <v-list-item-subtitle v-bind="attrs" v-on="on" v-text="item.desc">
                                                    </v-list-item-subtitle>
                                                </template>
                                                <span v-text="item.desc"></span>
                                            </v-tooltip>
                                            <v-list-item-subtitle class="text-right"
                                                v-text="item.planned ? 'сделать до ' + (new Date(item.planned)).toLocaleString() : ''">
                                            </v-list-item-subtitle>
                                        </v-list-item-content>

                                        <v-list-item-action>
                                            <v-btn icon @click="importantItem(item)">
                                                <v-icon :color="item.important ? 'error' : 'grey lighten-1'"
                                                    v-text="item.important ?'mdi-bookmark' : 'mdi-bookmark-outline'">
                                                </v-icon>
                                            </v-btn>
                                        </v-list-item-action>

                                        <v-list-item-action>
                                            <v-btn icon @click="editItem(item)">
                                                <v-icon color="orange lighten-1">mdi-pencil</v-icon>
                                            </v-btn>
                                        </v-list-item-action>

                                        <v-list-item-action class="ml-0">
                                            <v-btn icon @click="delItem(item)">
                                                <v-icon color="">mdi-delete-forever</v-icon>
                                            </v-btn>
                                        </v-list-item-action>
                                    </v-list-item>
                                </template>
                            </v-list>
                        </v-col>
                    </v-row>
                </v-container>
                <v-dialog v-model="calendarDialog" fullscreen hide-overlay transition="dialog-bottom-transition">
                    <v-card>
                        <v-toolbar dark color="primary" tile>
                            <v-toolbar-title>Запланированные события</v-toolbar-title>
                            <v-spacer></v-spacer>
                            <v-btn icon dark @click="calendarDialog = false">
                                <v-icon>mdi-close</v-icon>
                            </v-btn>
                        </v-toolbar>
                        <div>
                            <v-sheet tile height="54" color="grey lighten-3" class="d-flex">
                                <v-btn icon class="ma-2" @click="$refs.calendar.prev()">
                                    <v-icon>mdi-chevron-left</v-icon>
                                </v-btn>
                                <v-spacer></v-spacer>
                                <v-btn icon class="ma-2" text @click="calendarValue = ''">
                                    <v-icon left>mdi-calendar</v-icon>Сегодня
                                </v-btn>
                                <v-spacer></v-spacer>
                                <v-btn icon class="ma-2" @click="$refs.calendar.next()">
                                    <v-icon>mdi-chevron-right</v-icon>
                                </v-btn>
                            </v-sheet>
                            <v-sheet height="600">
                                <v-calendar ref="calendar" v-model="calendarValue" :weekdays="[1, 2, 3, 4, 5, 6, 0]"
                                    type="month" :events="computedCalendarEvents" event-overlap-mode="stack"
                                    event-overlap-threshold="30" :event-color="getEventColor" @click:event="showEvent">
                                </v-calendar>
                                <v-menu v-model="selectedOpen" :close-on-content-click="false"
                                    :activator="selectedElement" offset-x>
                                    <v-card v-if="selectedEvent" color="grey lighten-4" max-width="350px" flat>
                                        <v-toolbar :color="selectedEvent.color" dark>
                                            <v-btn v-if="selectedEvent.important" icon dark>
                                                <v-icon>mdi-bookmark</v-icon>
                                            </v-btn>
                                            <v-toolbar-title v-text="selectedEvent.name"></v-toolbar-title>
                                            <v-spacer></v-spacer>
                                            <v-btn icon @click="selectedOpen = false">
                                                <v-icon>mdi-close</v-icon>
                                            </v-btn>
                                        </v-toolbar>
                                        <v-card-text>
                                            <div v-text="selectedEvent.desc ?? 'Нет описания'"></div>
                                            <v-divider></v-divider>
                                            <div class="text-right" v-text="selectedEvent.planned.toLocaleString()">
                                            </div>
                                        </v-card-text>
                                        <v-card-actions>
                                            <v-btn text @click="selectedOpen = false">
                                                Закрыть
                                            </v-btn>
                                        </v-card-actions>
                                    </v-card>
                                </v-menu>
                            </v-sheet>
                        </div>
                    </v-card>
                </v-dialog>
            </v-main>
        </v-app>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js"></script>
    <script>
        new Vue({
            el: '#app',
            vuetify: new Vuetify({
                theme: {
                    themes: {
                        light: {
                            primary: '#7700ff'
                        }
                    }
                }
            }),
            data: () => ({
                loading: false,
                item: null,
                items: null,
                showAdditionalTaskParams: false,
                editedTask: {
                    id: 0,
                    name: '',
                    desc: '',
                    planned: {
                        date: null,
                        time: null,
                        dialogDate: false,
                        dialogTime: false
                    },
                    important: false
                },
                calendarDialog: false,
                calendarValue: '',
                selectedEvent: null,
                selectedElement: null,
                selectedOpen: false
            }),
            computed: {
                computeOnlyTasks() {
                    return (this.items || []).filter(i => !i.header && !i.divider) || []
                },
                selectedItem() {
                    if (!this.item) {
                        return {}
                    }
                    return this.computeOnlyTasks[this.item] || {}
                },
                computePlannedDate() {
                    if (
                        !this.showAdditionalTaskParams ||
                        !this.editedTask ||
                        !this.editedTask.planned.date ||
                        !this.editedTask.planned.time
                    ) {
                        return null
                    }
                    return new Date(`${this.editedTask.planned.date} ${this.editedTask.planned.time}`)
                },
                computedCalendarEvents() {
                    const tasks = this.computeOnlyTasks.filter(i => i.planned)
                    return tasks.map((task) => {
                        const planned = new Date(task.planned)
                        const max = new Date(planned.getFullYear(), planned.getMonth(), planned.getDate, 23, 59, 59)
                        return {
                            name: task.name,
                            desc: task.desc,
                            planned,
                            important: task.important,
                            start: planned,
                            end: max,
                            color: task.important ? 'error' : (task.done ? 'success' : 'info'),
                            timed: false,
                        }
                    })
                }
            },
            mounted() {
                this.loadItems()
            },
            methods: {
                async loadItems() {
                    this.loading = true
                    const fetchRes = await fetch('/todo')
                    const { data } = await fetchRes.json()
                    this.items = data || []
                    this.loading = false
                },
                update() {
                    this.updateItem({
                        _id: this.editedTask.id,
                        name: this.editedTask.name,
                        desc: this.editedTask.desc || '',
                        important: this.editedTask.important,
                        planned: this.computePlannedDate
                    })
                },
                async add() {
                    this.loading = true
                    const fetchRes = await fetch('/todo', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json;charset=utf-8'
                        },
                        body: JSON.stringify({
                            name: this.editedTask.name,
                            desc: this.showAdditionalTaskParams ? this.editedTask.desc : '',
                            important: this.showAdditionalTaskParams && this.editedTask.important,
                            planned: this.computePlannedDate
                        })
                    })
                    const data = await fetchRes.json()
                    this.loading = false
                    this.loadItems()
                },
                async updateItem(item, isDelete = false) {
                    this.loading = true
                    const fetchRes = await fetch(`/todo/${item._id}`, {
                        method: isDelete ? 'delete' : 'POST',
                        headers: {
                            'Content-Type': 'application/json;charset=utf-8'
                        },
                        body: JSON.stringify(item)
                    })
                    const data = await fetchRes.json()
                    this.loading = false
                    this.loadItems()
                },
                doneItem(item) {
                    item.done = !item.done
                    this.updateItem(item)
                },
                importantItem(item) {
                    item.important = !item.important
                    this.updateItem(item)
                },
                delItem(item) {
                    this.updateItem(item, true)
                },
                editItem(item) {
                    let planned = null
                    if (item.planned) {
                        const date = new Date(item.planned)
                        planned = {
                            date: `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')}`,
                            time: `${`${date.getHours()}`.padStart(2, '0')}-${`${date.getMinutes()}`.padStart(2, '0')}`,
                            dialogDate: false,
                            dialogTime: false
                        }
                    }
                    this.editedTask = {
                        id: item._id,
                        name: item.name,
                        desc: item.desc,
                        planned: {
                            date: planned ? planned.date : null,
                            time: planned ? planned.time : null,
                            dialogDate: false,
                            dialogTime: false
                        },
                        important: item.important
                    }
                    if (item.desc || item.important || planned) {
                        this.showAdditionalTaskParams = true
                    }
                },
                clear() {
                    this.editedTask = {
                        id: 0,
                        name: '',
                        desc: '',
                        planned: {
                            date: null,
                            time: null,
                            dialogDate: false,
                            dialogTime: false
                        },
                        important: false
                    }
                },
                clearPlanned() {
                    this.editedTask.planned.date = null
                    this.editedTask.planned.time = null
                },
                getEventColor(event) {
                    return event.color
                },
                showEvent({ nativeEvent, event }) {
                    const open = () => {
                        this.selectedEvent = event
                        this.selectedElement = nativeEvent.target
                        setTimeout(() => this.selectedOpen = true, 10)
                    }

                    if (this.selectedOpen) {
                        this.selectedOpen = false
                        setTimeout(open, 10)
                    } else {
                        open()
                    }

                    nativeEvent.stopPropagation()
                }
            }
        })
    </script>
</body>

</html>